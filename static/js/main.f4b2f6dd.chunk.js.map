{"version":3,"sources":["containers/about.js","containers/homePage/constants.js","containers/homePage/helpers.js","containers/homePage/home.js","containers/contact.js","containers/projects.js","containers/resume/resume.js","App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","Component","quotes","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleMovieMode","selectRandomQuotes","setState","state","movieModeEnabled","randomQuotes","className","onClick","Contact","id","type","name","required","value","Projects","Resume","class","title","src","width","height","App","react_router_dom","to","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4b2f6dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass About extends Component {\n  render() {\n    return (\n      <h1>This is the about page</h1>\n    )\n  }\n}\n\nexport default About;","export const quotes = [\n  `\"...this seasons must hire-developer!\"`,\n  `\"My favorite son.\" - Kyle's Mom`,\n  `\"He's pretty cool...\" - Josh`,\n  `\"Why are you always on the computer?\" - Kyle's nephew`,\n  `\"Watches too many Marvel movies\" - Everyone`  \n]\n","export const shuffle = (array) => {\n  let currentIndex = array.length, temporaryValue, randomIndex;\n\n  while (0 !== currentIndex) {\n\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}","import React, { Component } from 'react';\nimport { quotes } from './constants';\nimport { shuffle } from './helpers';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      movieModeEnabled: false,\n      quotes: [],\n    };\n  }\n\n  componentDidMount() {\n    this.selectRandomQuotes();\n  }\n\n  toggleMovieMode = () => {\n    this.selectRandomQuotes();\n    this.setState((state) => {\n      return { \n        movieModeEnabled: !this.state.movieModeEnabled,\n      };\n    });\n  }\n\n  selectRandomQuotes = () => {\n    let randomQuotes = shuffle(quotes);\n    \n    this.setState((state) => {\n      return {\n        quotes: randomQuotes,\n      }\n    });\n  }\n\n  render() {\n\n    return (\n      <div className=\"App-header\">\n        <h1 className=\"splash-text\">WEB DEVELOPER.</h1>\n        {\n          this.state.movieModeEnabled ? \n            <div>\n              <h3 className=\"blurb-one\">{this.state.quotes[0]}</h3>\n              <h3 className=\"blurb-two\">{this.state.quotes[1]}</h3>\n              <h3 className=\"blurb-three\">{this.state.quotes[2]}</h3>\n            </div>\n          : \n            null\n        }\n        \n        {\n          this.state.movieModeEnabled ? \n            <button onClick={this.toggleMovieMode} className=\"movieButton\">Disable Movie Mode</button>\n          : \n            <button onClick={this.toggleMovieMode} className=\"movieButton\">Enable Movie Mode</button>\n        }\n      </div>\n    )\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\n\nclass Contact extends Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"contact-header\">Contact Me</h1>\n        <p className=\"contact-text\">Want to get in touch? Send me a message and I will respond as soon as possible.</p>\n        <form id=\"contact-form\">\n          <input type=\"hidden\" name=\"contact_number\" required />\n          <label>Name*</label>\n          <input type=\"text\" name=\"user_name\" required />\n          <label>Email*</label>\n          <input type=\"email\" name=\"user_email\" required />\n          <label>Message*</label>\n          <textarea name=\"text\" required></textarea>\n          <input id=\"contact-submit\" type=\"submit\" value=\"Send Message\" />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Contact;","import React, { Component } from 'react';\n\nclass Projects extends Component {\n  render() {\n    return (\n      <h1>This is the Projects page</h1>\n    )\n  }\n}\n\nexport default Projects;","import React, { Component } from 'react';\n\nclass Resume extends Component {\n  render() {\n    return (\n      <div class=\"resume-div\">\n        <iframe \n                className=\"resume-iframe\"\n                title=\"resume\"\n                src=\"https://drive.google.com/file/d/1Vi_T60bp8eOXNzCWOqXA0XjstzCzX26O/preview\" \n                width=\"100%\" \n                height=\"900px\">\n        </iframe>      \n      </div>\n    );\n  }\n}\n\nexport default Resume;","import React, { Component } from 'react';\nimport { BrowserRouter as Router , Route, Link } from 'react-router-dom';\n\nimport About from './containers/about';\nimport Home from './containers/homePage/home';\nimport Contact from './containers/contact';\nimport Projects from './containers/projects';\nimport Resume from './containers/resume/resume';\n\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/about\">About</Link>\n              </li>\n              <li>\n                <Link to=\"/resume\">Resume</Link>\n              </li>\n              <li>\n                <Link to=\"/projects\">Projects</Link>\n              </li>\n              <li>\n                <Link to=\"/contact\">Contact</Link>\n              </li>\n            </ul>\n          </nav>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/resume\" component={Resume} />\n          <Route path=\"/projects\" component={Projects} />\n          <Route path=\"/contact\" component={Contact} />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}